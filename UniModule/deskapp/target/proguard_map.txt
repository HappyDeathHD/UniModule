com.grack.nanojson.JsonArray -> a.a.a.a:
    void <init>() -> <init>
    java.lang.Object get(int) -> get
com.grack.nanojson.JsonLazyNumber -> a.a.a.b:
    java.lang.String value -> a
    boolean isDouble -> b
    void <init>(java.lang.String,boolean) -> <init>
    double doubleValue() -> doubleValue
    float floatValue() -> floatValue
    int intValue() -> intValue
    long longValue() -> longValue
com.grack.nanojson.JsonObject -> a.a.a.c:
    void <init>() -> <init>
    java.lang.String getString(java.lang.String) -> a
com.grack.nanojson.JsonParser -> a.a.a.d:
    java.lang.Object value -> a
    int token -> b
    com.grack.nanojson.JsonTokener tokener -> c
    boolean lazyNumbers -> d
    void <init>(com.grack.nanojson.JsonTokener,boolean) -> <init>
    com.grack.nanojson.JsonParser$JsonParserContext object() -> a
    java.lang.Object parse(java.lang.Class) -> a
    java.lang.Object currentValue() -> d
    int advanceToken() -> e
    java.lang.Number parseNumber() -> f
    com.grack.nanojson.JsonStringWriter string() -> b
    boolean askForConfirmation(java.lang.String) -> a
    void update() -> c
    void lambda$update$0() -> g
com.grack.nanojson.JsonParser$JsonParserContext -> a.a.a.e:
    java.lang.Class clazz -> a
    void <init>(java.lang.Class) -> <init>
    java.lang.Object from(java.lang.String) -> a
com.grack.nanojson.JsonParserException -> a.a.a.f:
    void <init>(java.lang.Exception,java.lang.String,int,int,int) -> <init>
com.grack.nanojson.JsonStringWriter -> a.a.a.g:
    void <init>(java.lang.String) -> <init>
    java.lang.String done() -> a
com.grack.nanojson.JsonTokener -> a.a.a.h:
    int linePos -> c
    int rowPos -> d
    int charOffset -> e
    int utf8adjust -> f
    int tokenCharPos -> g
    int tokenCharOffset -> h
    boolean eof -> i
    int index -> j
    java.io.Reader reader -> k
    char[] buffer -> l
    int bufferLength -> m
    boolean utf8 -> n
    java.lang.StringBuilder reusableBuffer -> a
    boolean isDouble -> b
    char[] TRUE -> o
    char[] FALSE -> p
    char[] NULL -> q
    boolean $assertionsDisabled -> r
    void <init>(java.io.Reader) -> <init>
    void consumeKeyword(char,char[]) -> a
    void consumeTokenNumber(char) -> a
    char stringChar() -> b
    boolean isWhitespace(int) -> a
    boolean isAsciiLetter(int) -> b
    boolean refillBuffer() -> c
    int peekChar() -> d
    int ensureBuffer(int) -> c
    int advanceChar() -> e
    void consumeWhitespace() -> f
    int advanceToToken() -> a
    void fixupAfterRawBufferRead() -> g
    com.grack.nanojson.JsonParserException createHelpfulException(char,char[],int) -> a
    com.grack.nanojson.JsonParserException createParseException(java.lang.Exception,java.lang.String,boolean) -> a
    void <clinit>() -> <clinit>
com.grack.nanojson.JsonWriterBase -> a.a.a.i:
    char[] NULL -> b
    char[] HEX -> c
    char[] UNICODE_SMALL -> d
    char[] UNICODE_LARGE -> e
    java.lang.Appendable appendable -> a
    java.io.OutputStream out -> f
    boolean utf8 -> g
    java.lang.StringBuilder buffer -> h
    byte[] bb -> i
    int bo -> j
    java.util.BitSet states -> k
    int stateIndex -> l
    boolean first -> m
    boolean inObject -> n
    java.lang.String indentString -> o
    int indent -> p
    void <init>(java.lang.Appendable,java.lang.String) -> <init>
    com.grack.nanojson.JsonWriterBase value(java.lang.String,java.lang.String) -> a
    com.grack.nanojson.JsonWriterBase object() -> b
    com.grack.nanojson.JsonWriterBase end() -> c
    void doneInternal() -> d
    void appendIndent() -> a
    void raw(java.lang.String) -> a
    void raw(char[]) -> a
    void raw(char) -> a
    void flush() -> e
    void pre() -> f
    void preValue(java.lang.String) -> b
    void emitStringValue(java.lang.String) -> c
    void <clinit>() -> <clinit>
com.grack.nanojson.JsonWriterException -> a.a.a.j:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
ru.bpcbt.MainFrame -> ru.bpcbt.a:
    javax.swing.JTabbedPane tabbedPane -> a
    ru.bpcbt.navigator.NavigatorPanel inputFilesPanel -> b
    ru.bpcbt.navigator.NavigatorPanel modulesPanel -> c
    ru.bpcbt.navigator.NavigatorPanel outputFilesPanel -> d
    ru.bpcbt.settings.SettingsPanel settingsPanel -> e
    void <init>() -> <init>
    void setPaneTab(int) -> a
    ru.bpcbt.navigator.NavigatorPanel getInputFilesPanel() -> a
    ru.bpcbt.navigator.NavigatorPanel getModulesPanel() -> b
    ru.bpcbt.navigator.NavigatorPanel getOutputFilesPanel() -> c
    javax.swing.JPanel getInfoPanel() -> e
    ru.bpcbt.settings.SettingsPanel getSettingsPanel() -> d
ru.bpcbt.Program -> ru.bpcbt.Program:
    ru.bpcbt.MainFrame mainFrame -> a
    java.util.Map properties -> b
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    ru.bpcbt.MainFrame getMainFrame() -> a
    java.util.Map getProperties() -> b
    void lambda$main$0() -> c
ru.bpcbt.entity.Placeholder -> ru.bpcbt.a.a:
    java.lang.String rawPH -> a
    java.lang.String body -> b
    java.util.Map variables -> c
    java.util.Map links -> d
    void <init>(java.lang.String) -> <init>
    void setVariables(java.lang.String) -> a
    java.lang.String getWithReplaces() -> j
    java.lang.String getVariableWithReplaces() -> a
    java.lang.String wrapPH() -> b
    boolean isJson() -> c
    javafx.util.Pair getJsonAndInnerPH() -> d
    java.io.File getFile() -> e
    java.io.File getFile(java.lang.String) -> b
    void mergeVariables(java.util.Map) -> a
    boolean isVariable() -> f
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.Map getVariables() -> g
    java.lang.String getRawPH() -> h
    java.util.Map getLinks() -> i
ru.bpcbt.entity.ReplaceTask -> ru.bpcbt.a.b:
    java.lang.String rawPlaceholder -> a
    java.lang.String content -> b
    java.util.Map parentVariables -> c
    int priority -> d
    void <init>(java.lang.String,java.lang.String,java.util.Map) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.Map,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getRawPlaceholder() -> a
    java.lang.String getContent() -> b
    java.util.Map getParentVariables() -> c
    int getPriority() -> d
    int compareTo(java.lang.Object) -> compareTo
ru.bpcbt.logger.Narrator -> ru.bpcbt.b.a:
    javax.swing.JLabel label -> a
    javax.swing.JLabel getLabel() -> a
    void yell(java.lang.String,java.lang.Exception) -> a
    void yell(java.lang.String) -> a
    void normal(java.lang.String) -> b
    void success(java.lang.String) -> c
    void warn(java.lang.String) -> d
    void error(java.lang.String) -> e
    void <clinit>() -> <clinit>
ru.bpcbt.logger.ReportPane -> ru.bpcbt.b.b:
    ru.bpcbt.logger.ReportPane INSTANCE -> a
    javax.swing.text.StyledDocument doc -> b
    void <init>() -> <init>
    ru.bpcbt.logger.ReportPane getReportPane() -> a
    void success(java.lang.String) -> a
    void fine(java.lang.String) -> b
    void normal(java.lang.String) -> c
    void warning(java.lang.String) -> d
    void error(java.lang.String) -> e
    void error(java.lang.String,java.lang.Exception) -> a
    void debug(java.lang.String) -> f
    void insertString(java.lang.String,javax.swing.text.SimpleAttributeSet) -> a
    void setFontToReport(java.awt.Font) -> a
    void clearReport() -> b
    void <clinit>() -> <clinit>
ru.bpcbt.logger.ReportPanel -> ru.bpcbt.b.c:
    void <init>() -> <init>
ru.bpcbt.misc.ColoredButton -> ru.bpcbt.c.a:
    java.awt.Color hoverBackgroundColor -> a
    java.awt.Color pressedBackgroundColor -> b
    void <init>(java.lang.String) -> <init>
    void <init>(javax.swing.Icon,java.lang.String,java.awt.Color,java.awt.Color,java.awt.Color) -> <init>
    void paintComponent(java.awt.Graphics) -> paintComponent
    void setContentAreaFilled(boolean) -> setContentAreaFilled
    void setHoverBackgroundColor(java.awt.Color) -> a
    void setPressedBackgroundColor(java.awt.Color) -> b
ru.bpcbt.misc.Delimiters -> ru.bpcbt.c.b:
    ru.bpcbt.misc.Delimiters START_END -> a
    ru.bpcbt.misc.Delimiters DELIMITER -> b
    ru.bpcbt.misc.Delimiters VARIABLE_START_END -> c
    ru.bpcbt.misc.Delimiters LINK_START_END -> d
    java.lang.String symbol -> e
    java.lang.String description -> f
    ru.bpcbt.misc.Delimiters[] $VALUES -> g
    ru.bpcbt.misc.Delimiters[] values() -> values
    ru.bpcbt.misc.Delimiters valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String getSymbol() -> a
    java.lang.String getDescription() -> b
    void <clinit>() -> <clinit>
ru.bpcbt.navigator.ButtonsPanel -> ru.bpcbt.d.a:
    ru.bpcbt.misc.ColoredButton saveB -> a
    ru.bpcbt.misc.ColoredButton processSingleB -> b
    ru.bpcbt.misc.ColoredButton processAllB -> c
    ru.bpcbt.misc.ColoredButton uploadSingleB -> d
    ru.bpcbt.misc.ColoredButton uploadAllB -> e
    void <init>(ru.bpcbt.navigator.NavigatorPanel) -> <init>
    javax.swing.ImageIcon getIconFromResource(java.lang.String) -> a
    void setEnabledToProcessButtons(boolean) -> a
    ru.bpcbt.misc.ColoredButton getSaveB() -> a
    void lambda$new$7(java.awt.event.ActionEvent) -> a
    void lambda$new$6(java.awt.event.ActionEvent) -> b
    void lambda$new$5(java.awt.event.ActionEvent) -> c
    void lambda$new$4(java.awt.event.ActionEvent) -> d
    void lambda$new$3(ru.bpcbt.navigator.NavigatorPanel,java.awt.event.ActionEvent) -> a
    void lambda$new$2(ru.bpcbt.navigator.NavigatorPanel,java.awt.event.ActionEvent) -> b
    void lambda$new$1(ru.bpcbt.navigator.NavigatorPanel,java.awt.event.ActionEvent) -> c
    void lambda$new$0(ru.bpcbt.navigator.NavigatorPanel,java.awt.event.ActionEvent) -> d
ru.bpcbt.navigator.NavigatorPanel -> ru.bpcbt.d.b:
    ru.bpcbt.settings.Settings workingDirType -> a
    javax.swing.JTextPane display -> b
    javax.swing.JList navigatorList -> c
    java.util.List fileList -> d
    java.io.File currentFile -> e
    boolean isChanged -> f
    ru.bpcbt.navigator.ButtonsPanel buttonsPanel -> g
    void <init>(ru.bpcbt.settings.Settings) -> <init>
    void refreshFiles() -> a
    void insertString(java.lang.String,javax.swing.text.SimpleAttributeSet) -> a
    void setColoredTextToDisplay(java.lang.String) -> a
    void repaintTextToDisplay() -> b
    void setFontToDisplay(java.awt.Font) -> a
    void saveCurrentFile() -> c
    void openCurrentDir() -> d
    java.util.List getSelectedFiles() -> e
    java.util.List getFileList() -> f
    ru.bpcbt.navigator.ButtonsPanel getButtonsPanel() -> g
    void lambda$getSelectedFiles$1(java.util.List,int) -> a
    java.lang.String lambda$refreshFiles$0(java.lang.String,java.io.File) -> a
    boolean access$002(ru.bpcbt.navigator.NavigatorPanel,boolean) -> a
    boolean access$000(ru.bpcbt.navigator.NavigatorPanel) -> a
    java.io.File access$102(ru.bpcbt.navigator.NavigatorPanel,java.io.File) -> a
    java.util.List access$200(ru.bpcbt.navigator.NavigatorPanel) -> b
    ru.bpcbt.navigator.ButtonsPanel access$300(ru.bpcbt.navigator.NavigatorPanel) -> c
    java.io.File access$100(ru.bpcbt.navigator.NavigatorPanel) -> d
    void access$400(ru.bpcbt.navigator.NavigatorPanel,java.lang.String) -> a
ru.bpcbt.navigator.NavigatorPanel$1 -> ru.bpcbt.d.c:
    ru.bpcbt.navigator.NavigatorPanel this$0 -> a
    void <init>(ru.bpcbt.navigator.NavigatorPanel) -> <init>
    void insertUpdate(javax.swing.event.DocumentEvent) -> insertUpdate
    void removeUpdate(javax.swing.event.DocumentEvent) -> removeUpdate
    void changedUpdate(javax.swing.event.DocumentEvent) -> changedUpdate
ru.bpcbt.navigator.NavigatorPanel$2 -> ru.bpcbt.d.d:
    ru.bpcbt.navigator.NavigatorPanel this$0 -> a
    void <init>(ru.bpcbt.navigator.NavigatorPanel) -> <init>
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
ru.bpcbt.rest.TemplateUploader -> ru.bpcbt.e.a:
    ru.bpcbt.rest.UnimessageClient client -> a
    java.util.Map templateIdMap -> b
    java.util.Map templateTopicMap -> c
    java.util.Map templateNameMap -> d
    int attemptsCount -> e
    boolean checkAndPrepareConnectionSettings() -> f
    void refresh() -> a
    javax.swing.SwingWorker uploadJob(java.util.List) -> a
    void fillThemes() -> g
    boolean upload(java.lang.String,java.io.File) -> b
    java.lang.String getLanguage(java.lang.String) -> a
    boolean access$000() -> b
    void access$100() -> c
    java.lang.String access$200(java.io.File) -> a
    java.util.Map access$300() -> d
    java.util.Map access$400() -> e
    boolean access$500(java.lang.String,java.io.File) -> a
    void <clinit>() -> <clinit>
ru.bpcbt.rest.TemplateUploader$1 -> ru.bpcbt.e.b:
    java.util.List val$files -> a
    void <init>(java.util.List) -> <init>
    java.lang.Object doInBackground() -> doInBackground
ru.bpcbt.rest.UnimessageClient -> ru.bpcbt.e.c:
    java.lang.String coreUrl -> a
    java.lang.String token -> b
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    boolean isAuth() -> a
    int uploadFileToTemplate(java.io.File,long,java.lang.String,java.lang.String) -> a
    void setNewToken(java.lang.String,java.lang.String) -> a
    java.lang.String getRawTemplates() -> b
ru.bpcbt.settings.SelectDirActionListener -> ru.bpcbt.f.a:
    java.awt.Component parent -> a
    javax.swing.JTextField selectedDirTF -> b
    ru.bpcbt.settings.Settings property -> c
    void <init>(java.awt.Component,javax.swing.JTextField,ru.bpcbt.settings.Settings) -> <init>
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
ru.bpcbt.settings.Settings -> ru.bpcbt.f.b:
    ru.bpcbt.settings.Settings INPUT_DIR -> a
    ru.bpcbt.settings.Settings MODULE_DIR -> b
    ru.bpcbt.settings.Settings OUTPUT_DIR -> c
    ru.bpcbt.settings.Settings FONT_NAME -> d
    ru.bpcbt.settings.Settings STYLE -> e
    ru.bpcbt.settings.Settings FONT_SIZE -> f
    ru.bpcbt.settings.Settings CORE_URL -> g
    ru.bpcbt.settings.Settings USERNAME -> h
    ru.bpcbt.settings.Settings PASSWORD -> i
    ru.bpcbt.settings.Settings DEBUG -> j
    ru.bpcbt.settings.Settings LAST_SHA -> k
    java.lang.String description -> l
    ru.bpcbt.settings.Settings[] $VALUES -> m
    ru.bpcbt.settings.Settings[] values() -> values
    ru.bpcbt.settings.Settings valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getDescription() -> a
    void <clinit>() -> <clinit>
ru.bpcbt.settings.SettingsPanel -> ru.bpcbt.f.c:
    javax.swing.JTextField inputDirTF -> a
    javax.swing.JTextField modulesDirTF -> b
    javax.swing.JTextField outputDirTF -> c
    javax.swing.JComboBox fontNameCB -> d
    javax.swing.JComboBox styleCB -> e
    javax.swing.JSpinner fontSizeS -> f
    javax.swing.JTextField coreUrlTF -> g
    javax.swing.JTextField usernameTF -> h
    javax.swing.JCheckBox debugFlag -> i
    javax.swing.JPasswordField passwordPF -> j
    java.awt.GridBagConstraints gridBag -> k
    java.lang.String[] fonts -> l
    void <init>() -> <init>
    void addOptionDir(ru.bpcbt.settings.Settings,javax.swing.JTextField) -> a
    void loadConfigurations() -> a
    java.lang.String getPassword() -> b
    void setPassword(java.lang.String) -> a
    boolean isDebug() -> c
    void lambda$addSaveButton$0(java.awt.event.ActionEvent) -> a
ru.bpcbt.utils.FileUtils -> ru.bpcbt.g.a:
    java.util.Map cachedFiles -> a
    java.util.Map fileProcessStatus -> b
    java.lang.String SEPARATOR -> c
    boolean isFileExists(java.lang.String) -> f
    boolean isFileExists(java.io.File) -> a
    boolean isDirExists(java.lang.String) -> a
    void setProperties(java.util.Map) -> a
    java.util.Map getProperties() -> a
    java.util.List getFilesByTypeRecursively(java.lang.String) -> b
    java.lang.String readFile(java.io.File) -> b
    java.lang.String readAndCacheFileContent(java.io.File) -> c
    boolean createFile(java.lang.String,java.lang.String) -> a
    java.lang.String makeTitleFromFile(java.io.File,java.lang.String) -> a
    java.lang.String[] separatePlaceholders(java.lang.String) -> c
    void writeResultFile(java.lang.String,java.lang.String) -> b
    java.lang.String getLanguage(java.lang.String) -> d
    java.util.HashMap getVariableMapWithLocale(java.io.File) -> d
    void deleteIfExists(java.lang.String) -> e
    void refresh() -> b
    java.lang.String lambda$getProperties$3(java.util.Properties,ru.bpcbt.settings.Settings) -> a
    ru.bpcbt.settings.Settings lambda$getProperties$2(ru.bpcbt.settings.Settings) -> a
    boolean lambda$getProperties$1(java.util.Properties,ru.bpcbt.settings.Settings) -> b
    void lambda$setProperties$0(java.util.Properties,ru.bpcbt.settings.Settings,java.lang.String) -> a
    void <clinit>() -> <clinit>
ru.bpcbt.utils.GlobalUtils -> ru.bpcbt.g.b:
    void refreshAllFiles() -> a
    void setNavigatorsFont(java.awt.Font) -> a
    void setEnabledToProcessButtons(boolean) -> a
    java.lang.String getErrorMessageWithException(java.lang.String,java.lang.Exception) -> a
ru.bpcbt.utils.JsonUtils -> ru.bpcbt.g.c:
    java.util.Map cachedJson -> a
    java.util.Map jsonProcessStatus -> b
    java.util.Map parseModule(java.io.File) -> a
    java.util.List parseSkeleton(java.io.File) -> b
    java.util.List parseSkeleton(java.io.File,java.lang.String) -> a
    void fillMapFromModuleJson(java.util.Map,com.grack.nanojson.JsonObject,java.lang.String) -> a
    void refresh() -> a
    void <clinit>() -> <clinit>
ru.bpcbt.utils.ReplaceTasksExecutor -> ru.bpcbt.g.d:
    java.util.concurrent.atomic.AtomicInteger workersCount -> a
    java.util.concurrent.PriorityBlockingQueue tasks -> b
    java.util.Map foundReplacements -> c
    java.util.Queue notFoundReplacements -> d
    int mainJobsCount -> e
    java.util.concurrent.atomic.AtomicInteger mainJobsDone -> f
    void process(java.util.List) -> a
    java.lang.String getContentForPlaceholder(ru.bpcbt.entity.Placeholder,int) -> c
    void refresh() -> a
    void lambda$process$3(java.io.File) -> a
    boolean lambda$process$2(java.io.File) -> b
    ru.bpcbt.entity.ReplaceTask lambda$process$1(java.io.File) -> c
    boolean lambda$process$0(java.io.File) -> d
    int access$000() -> b
    java.util.concurrent.atomic.AtomicInteger access$100() -> c
    java.util.concurrent.atomic.AtomicInteger access$200() -> d
    java.util.concurrent.PriorityBlockingQueue access$300() -> e
    javax.swing.SwingWorker access$400(ru.bpcbt.entity.ReplaceTask) -> a
    void access$500() -> f
    java.util.Set access$600(java.lang.String) -> a
    boolean access$700(ru.bpcbt.entity.Placeholder,int) -> a
    java.lang.String access$800(ru.bpcbt.entity.Placeholder,int) -> b
    java.util.Map access$900() -> g
    void <clinit>() -> <clinit>
ru.bpcbt.utils.ReplaceTasksExecutor$1 -> ru.bpcbt.g.e:
    void <init>() -> <init>
    java.lang.Object doInBackground() -> doInBackground
ru.bpcbt.utils.ReplaceTasksExecutor$2 -> ru.bpcbt.g.f:
    ru.bpcbt.entity.ReplaceTask val$task -> a
    void <init>(ru.bpcbt.entity.ReplaceTask) -> <init>
    java.lang.Object doInBackground() -> doInBackground
ru.bpcbt.utils.Style -> ru.bpcbt.g.g:
    java.awt.Color RED -> a
    java.awt.Color RED_B -> i
    java.awt.Color GREEN -> b
    java.awt.Color GREEN_B -> c
    java.awt.Color BLUE -> d
    java.awt.Color BLUE_B -> e
    java.awt.Color YELLOW -> f
    java.awt.Color YELLOW_B -> g
    java.awt.Color GRAY -> h
    javax.swing.UIManager$LookAndFeelInfo[] lafs -> j
    javax.swing.text.SimpleAttributeSet error -> k
    javax.swing.text.SimpleAttributeSet success -> l
    javax.swing.text.SimpleAttributeSet warning -> m
    javax.swing.text.SimpleAttributeSet fine -> n
    javax.swing.text.SimpleAttributeSet mark -> o
    javax.swing.UIManager$LookAndFeelInfo[] getLafs() -> a
    javax.swing.text.SimpleAttributeSet getError() -> b
    javax.swing.text.SimpleAttributeSet getSuccess() -> c
    javax.swing.text.SimpleAttributeSet getWarning() -> d
    javax.swing.text.SimpleAttributeSet getFine() -> e
    javax.swing.text.SimpleAttributeSet getMark() -> f
    void <clinit>() -> <clinit>
